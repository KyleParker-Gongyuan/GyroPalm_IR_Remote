// Begin AutoGenerated Includes - DO NOT EDIT BELOW
#include <GyroPalmEngine.h>
#include <GyroPalmLVGL.h>

// End AutoGenerated Includes - DO NOT EDIT ABOVE

#include <Arduino.h> // might not be needed
#include <IRremoteESP8266.h>
#include <IRsend.h> // might not be needed

const uint16_t kIrLed = 13;  // ESP8266 GPIO pin to use. Recommended: 4 (D2).

IRsend irsend(kIrLed);  // Set the GPIO to be used to sending the message.

// Begin AutoGenerated Globals - DO NOT EDIT BELOW
GyroPalm *device;
GyroPalmEngine gplm("gp123456");    //declares a GyroPalm Engine object with wearableID

AXP20X_Class *power;
lv_task_t *barTask;
void lv_update_task(struct _lv_task_t *);

enum Screen { SCR_HOME, SCR_MORSE, SCR_HEX, SCR_CHOOSE, SCR_ALLCODES };	//Screen indexes
lv_obj_t *screen[5];    //screen pointers
GyroPalmLVGL form[5];   //screen helper methods
Screen curScreen = SCR_HOME;    //default screen
// End AutoGenerated Globals - DO NOT EDIT ABOVE

// Begin AutoGenerated Callbacks - DO NOT EDIT BELOW
void lv_update_task(struct _lv_task_t *data) {
    int battPercent = power->getBattPercentage();
    bool isCharging = power->isChargeing();
    form[curScreen].updateBar(battPercent, isCharging);
    form[curScreen].setTime(gplm.getTime());     //update Time View
}

static void btn_event_handler(lv_obj_t * obj, lv_event_t event)
{
    if (event == LV_EVENT_CLICKED) {
        String btnName = lv_list_get_btn_text(obj);
		Serial.printf("Clicked: %s\n", btnName);

        switch (curScreen)
        {
            case SCR_HOME:
                if (btnName == "Make IR Code"){ // Choose what type of IR Code to send (MORSER W.I.P)
                        showApp(SCR_CHOOSE);
                }

                if (btnName == "Send a Code"){ // list of all IR Codes you have stored //W.I.P
                    showApp(SCR_ALLCODES);
                }
            break;

            case SCR_CHOOSE:
            
                if (btnName == "Send Hex"){
                    showApp(SCR_HEX);
                }

            break;
            
            case SCR_HEX:
            
                if (btnName == "3"){
                    irsend.mark(10000); // this turns on the IR for X time
                    //irsend.sendSony(0xa90, 12, 2);  // 12 bits & 2 repeats (IDK IF THIS WORKS OR HOW IT WILL WORK)
                }
                if (btnName == "4"){
                    irsend.mark(50000); // this turns on the IR for X time
                    //irsend.sendSony(0xa90, 12, 2);  // 12 bits & 2 repeats (IDK IF THIS WORKS OR HOW IT WILL WORK)
                }

            break;

            default: break;
		}
	}
}

static void roller_event_handler(lv_obj_t * roller, lv_event_t event)
{
    if(event == LV_EVENT_VALUE_CHANGED) {
		int rollerIndex = lv_roller_get_selected(roller);
		char buf[32];	//selected string
		lv_roller_get_selected_str(roller, buf, sizeof(buf));
		
        switch (curScreen)
        {
            case SCR_HOME:
			
            break;

            default: break;
        }
    }
}

// End AutoGenerated Callbacks - DO NOT EDIT ABOVE

// Begin AutoGenerated Screens - DO NOT EDIT BELOW
void showApp(int page) {
    if ((Screen) page != curScreen) {
        form[curScreen].removeBar();    //remove old StatusBar before proceeding
    }

    switch (page)
    {
		case SCR_HOME:
        {
            //Draw screen UI
            curScreen = (Screen) page;
            form[curScreen].init(screen[curScreen]);  //now defining screen items
            form[curScreen].createBar(barTask, lv_update_task);
            form[curScreen].setTime(gplm.getTime());

			form[curScreen].createButton(0, -37, "Make IR Code", btn_event_handler, true, 214);    //show element

			form[curScreen].createButton(0, 67, "Send a Code", btn_event_handler, true, 214);    //show element

            form[curScreen].showScreen(ANIM_NONE);   //show the screen w/ no animation
        }
        break;

		case SCR_MORSE:
        {
            //Draw screen UI
            curScreen = (Screen) page;
            form[curScreen].init(screen[curScreen]);  //now defining screen items
            form[curScreen].createBar(barTask, lv_update_task);
            form[curScreen].setTime(gplm.getTime());

			form[curScreen].createLabel(0, -37, "Hello World");    //show element

			form[curScreen].createButton(-77, 67, "Button", btn_event_handler, true, 59);    //show element

			form[curScreen].createButton(0, 67, "Button", btn_event_handler, true, 59);    //show element

			form[curScreen].createButton(77, 67, "Button", btn_event_handler, true, 59);    //show element

            form[curScreen].showScreen(ANIM_NONE);   //show the screen w/ no animation
        }
        break;

		case SCR_HEX:
        {
            //Draw screen UI
            curScreen = (Screen) page;
            form[curScreen].init(screen[curScreen]);  //now defining screen items
            form[curScreen].createBar(barTask, lv_update_task);
            form[curScreen].setTime(gplm.getTime());
            // (make this into a loop)
            /*
            int numCount = 0;
            int rowCount = 3;
            int colCount = 6;
            int startingPoint = -50;
            int space = 25;
            while (numCount !=9)
            {
                form[curScreen].createButton(-50, -15, string(numCount), btn_event_handler, true, 20);    //show element
                // check LVGL if string(numCount) is a thing

                numCount++;
            }

            */

			//form[curScreen].createLabel(0, -37, "Hello World");    //show element

            // (20 is too small)
			form[curScreen].createButton(-130, -25, "0", btn_event_handler, true, 30);    //show element
            
			form[curScreen].createButton(-85, -25, "1", btn_event_handler, true, 30);    //show element
            
			form[curScreen].createButton(-40, -25, "2", btn_event_handler, true, 30);    //show element
            
			form[curScreen].createButton(5, -25, "3", btn_event_handler, true, 30);    //show element
            
			form[curScreen].createButton(50, -25, "4", btn_event_handler, true, 30);    //show element
              /*         
			form[curScreen].createButton(-75, 20, "5", btn_event_handler, true, 30);    //show element
            
			form[curScreen].createButton(-45, 20, "6", btn_event_handler, true, 30);    //show element
                        
			form[curScreen].createButton(-15, 20, "7", btn_event_handler, true, 30);    //show element
            
			form[curScreen].createButton(15, 20, "8", btn_event_handler, true, 30);    //show element
            
			form[curScreen].createButton(50, 20, "9", btn_event_handler, true, 30);    //show element
            
			form[curScreen].createButton(-75, 65, "A", btn_event_handler, true, 30);    //show element
            
			form[curScreen].createButton(-45, 65, "B", btn_event_handler, true, 30);    //show element
            
			form[curScreen].createButton(-15, 65, "C", btn_event_handler, true, 30);    //show element
            
			form[curScreen].createButton(15, 65, "D", btn_event_handler, true, 30);    //show element
        
			form[curScreen].createButton(50, 65, "F", btn_event_handler, true, 30);    //show element          
             */

            form[curScreen].showScreen(ANIM_NONE);   //show the screen w/ no animation
        }
        break;

		case SCR_CHOOSE:
        {
            //Draw screen UI
            curScreen = (Screen) page;
            form[curScreen].init(screen[curScreen]);  //now defining screen items
            form[curScreen].createBar(barTask, lv_update_task);
            form[curScreen].setTime(gplm.getTime());

			form[curScreen].createButton(-58, -37, "Send Hex", btn_event_handler, true, 98);    //show element

			form[curScreen].createButton(58, -37, "Send Morse", btn_event_handler, true, 98);    //show element

			form[curScreen].createButton(0, 67, "Button", btn_event_handler, true, 214);    //show element

            form[curScreen].showScreen(ANIM_NONE);   //show the screen w/ no animation
        }
        break;

		case SCR_ALLCODES:
        {
            //Draw screen UI
            curScreen = (Screen) page;
            form[curScreen].init(screen[curScreen]);  //now defining screen items
            form[curScreen].createBar(barTask, lv_update_task);
            form[curScreen].setTime(gplm.getTime());

			form[curScreen].createRoller(0, -37, "Item A\nItem B\nItemC\nItemD\nItemE", 3, roller_event_handler, true, 224);    //show element

			form[curScreen].createButton(0, 67, "Button", btn_event_handler, true, 214);    //show element

            form[curScreen].showScreen(ANIM_NONE);   //show the screen w/ no animation
        }
        break;


        default: break;
    }
}
// End AutoGenerated Screens - DO NOT EDIT ABOVE

void setup() {
	Serial.begin(115200);
	irsend.begin(); // starts allowing you to be able to send IR CODES (i hope)
    // Begin AutoGenerated Setup - DO NOT EDIT BELOW
	gplm.begin();
	delay(100);
	gplm.listenEvents(false);    //starts listening for events

	device = gplm.wearable; //gives control to the developer to run device methods
	device->lvgl_begin();   //Initiate LVGL core
	device->bl->adjust(120);    //Lower the brightness
	power = gplm.power;		//gives control to the developer to access power methods
	power->setChargeControlCur(500);    //enable fast charging

	showApp(curScreen);
	// End AutoGenerated Setup - DO NOT EDIT ABOVE
}

void loop() {
	Serial.println("Hello World");
	delay(1000);
	
    // Begin AutoGenerated Loop - DO NOT EDIT BELOW
	lv_task_handler();
	delay(50);
	// End AutoGenerated Loop - DO NOT EDIT ABOVE
}
